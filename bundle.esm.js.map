{"version":3,"file":"bundle.esm.js","sources":["src/ActionResult.js","src/stores.js","src/ids.js","src/build-smart-component.js","src/RecoverableError.js","src/Dispatcher.js","src/default-dispatcher.js","src/build-store.js","src/index.js"],"sourcesContent":["export default class ActionResult {\n\tconstructor(immediate, deferred) {\n\t\tif(deferred && !(deferred instanceof Function)) {\n\t\t\tthrow new Error(\n\t\t\t\t'Second argument to ActionResult constructor must be a function if supplied.'\n\t\t\t);\n\t\t}\n\t\tthis.immediate = immediate;\n\t\tthis.deferred = deferred;\n\t}\n}","export default {};","class IdGenerator {\n\tconstructor() {\n\t\tthis.componentId = 1;\n\t}\n\n\tnextComponentId() {\n\t\treturn this.componentId++;\n\t}\n}\nexport default new IdGenerator();","import React from 'react';\nimport stores from './stores';\nimport ids from './ids';\n\nexport default (Component, ...connectedStores) => {\n\tclass SmartComponent extends React.Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {};\n\t\t\tthis.key = ids.nextComponentId();\n\t\t\tfor(const key of connectedStores) {\n\t\t\t\tif(!stores.hasOwnProperty(key)) {\n\t\t\t\t\tthrow new Error(`Cannot connect component \"${Component.name}\" to non-existant store \"${key}\"`);\n\t\t\t\t}\n\t\t\t\tstores[key].connectToState(this.key, this.setState.bind(this));\n\t\t\t\tthis.state[key] = stores[key].fullState();\n\t\t\t}\n\t\t}\n\t\tcomponentWillUnmount() {\n\t\t\tfor(const key of connectedStores) {\n\t\t\t\tconnectedStores[key].ignore(this.key);\n\t\t\t}\n\t\t}\n\n\t\trender() {\n\t\t\tconst errors = {};\n\t\t\tconst values = {};\n\t\t\tfor(const key in this.state) {\n\t\t\t\terrors[key] = this.state[key].errors;\n\t\t\t\tvalues[key] = this.state[key].value;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<Component\n\t\t\t\t\terrors={errors}\n\t\t\t\t\t{...values}\n\t\t\t\t\t{...this.props}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\treturn SmartComponent;\n}","import { Map } from 'immutable';\n\nexport default class RecoverableError extends Error {\n\tconstructor(message, key = 'default') {\n\t\tlet data = null;\n\t\tif(message instanceof RecoverableError) {\n\t\t\tdata = message.data;\n\t\t}\n\t\telse if(message instanceof Error) {\n\t\t\tdata = Map().set('default', message);\n\t\t}\n\t\telse if(typeof message === 'string') {\n\t\t\tdata = Map().set(key, message);\n\t\t}\n\t\telse {\n\t\t\tdata = Map(message);\n\t\t}\n\n\t\tmessage = '';\n\t\tjsData = data.toJS();\n\t\tfor(const key of jsData) {\n\t\t\tmessage += `${key}: ${jsData[key]}\\n`;\n\t\t}\n\n\t\tsuper(message);\n\n\t\tthis.data = data;\n\t}\n\n\ttoJS() {\n\t\treturn this.data.toJS();\n\t}\n}","import ActionResult from './ActionResult';\nimport RecoverableError from './RecoverableError';\n\nexport function Dispatcher() {\n\tlet _stores = [];\n\tconst _actionQueue = [];\n\tlet _currentAction = null;\n\n\tthis.subscribe = function(store) {\n\t\tif(!store || !store.isStore) {\n\t\t\tthrow new Error('Dispatcher.subscribe requires a store.')\n\t\t}\n\t\t_stores.push(store);\n\t};\n\n\t// Returns a Promise that resolves to true if the action was successful and false if there was\n\t// an error (recoverable or non-recoverable) thrown.\n\tthis.trigger = function(name, data = {}) {\n\t\t// Determine which stores will handle this action.\n\t\tconst stores = _stores.filter(s => s.canHandleAction(name));\n\n\t\tif(!stores.length) {\n\t\t\tthrow new Error(`There are no handlers for action \"${name}\"`);\n\t\t}\n\n\t\t// Get the immediately new state for each store\n\t\tconst results = stores.map(s => processImmediateAction(s, name, data, s.state()));\n\n\t\tlet returnValue = null;\n\n\t\tif(results.some(result => result.error)) {\n\t\t\treturnValue = false\n\t\t}\n\n\t\tif(!results.some(result => result.deferred) && _actionQueue.length === 0) {\n\t\t\treturnValue = true;\n\t\t}\n\n\t\t// Apply the new dirty states for each store\n\t\tfor(const result of results) {\n\t\t\tif(!result.error) {\n\t\t\t\tresult.store.setState(result.state, false);\n\t\t\t\t// There is no deferred piece to the result and no pending deferrec actions, so set\n\t\t\t\t// the clean state as well\n\t\t\t\tif(returnValue === true) {\n\t\t\t\t\tresult.store.setState(result.state, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.store.setError(result.error);\n\t\t\t}\n\t\t\tresult.store.triggerStateChange();\n\t\t}\n\n\t\tif(returnValue !== null) {\n\t\t\t// If we are waiting on anything in the queue then we also need to push this on to the\n\t\t\t// queue so that we can re-play it once the previous actions are complete.\n\t\t\tif(_actionQueue.length) {\n\t\t\t\t_actionQueue.push({\n\t\t\t\t\tname,\n\t\t\t\t\tdata,\n\t\t\t\t\tresults,\n\t\t\t\t\tresolve: null,\n\t\t\t\t\treject: null\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn returnValue;\n\t\t}\n\n\t\t// If there are deferred values to wait for then add the action to the queue \n\t\treturn new Promise((resolve, reject) => {\n\t\t\t_actionQueue.push({\n\t\t\t\tname,\n\t\t\t\tdata,\n\t\t\t\tresults,\n\t\t\t\tresolve,\n\t\t\t\treject\n\t\t\t});\n\t\t\tattemptNextActionFromQueue();\n\t\t});\n\t};\n\n\tconst attemptNextActionFromQueue = function() {\n\t\tif(!_currentAction) {\n\t\t\t_currentAction = _actionQueue.shift();\n\t\t\tif(_currentAction) {\n\t\t\t\tprocessActionFromQueue(_currentAction);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst processActionFromQueue = async function({ name, data, results, resolve, reject }) {\n\t\t// Determine which stores will handle this action.\n\t\tconst stores = _stores.filter(s => s.canHandleAction(name));\n\n\t\t// Get the clean state from the server for all deferred actions\n\t\tconst cleanResults = await Promise.all(results.map(processDeferredAction));\n\n\t\t// Group clean results by their store key\n\t\tconst stateByStoreKey = {};\n\t\tfor(const { state, error, store } of cleanResults) {\n\t\t\tstateByStoreKey[store.key()] = { clean: state, error, dirty: state, store };\n\t\t\tstore.setState(state, true);\n\t\t}\n\n\t\t// Re-apply future actions\n\t\tfor(const action of _actionQueue) {\n\t\t\t// Determine which stores will handle this action.\n\t\t\tconst stores = _stores.filter(s => s.canHandleAction(action.name));\n\n\t\t\t// Get the immediately new state for each store\n\t\t\tconst results = stores.map(\n\t\t\t\ts => processImmediateAction(s, action.name, action.data, s.state())\n\t\t\t);\n\n\t\t\t// Apply the new dirty states for each store\n\t\t\tfor(const result of results) {\n\t\t\t\tconst key = result.store.key();\n\t\t\t\tif(stateByStoreKey.hasOwnProperty(key)) {\n\t\t\t\t\tstateByStoreKey[key].dirty = result.state;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the clean and dirty state for all stores and trigger updates\n\t\tlet hasError = false;\n\t\tfor(const key in stateByStoreKey) {\n\t\t\tconst { store, clean, dirty, error } = stateByStoreKey[key];\n\t\t\tif(!error) {\n\t\t\t\tstore.setState(clean, true);\n\t\t\t\tstore.setState(dirty, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\thasError = true;\n\t\t\t\tstore.setError(error);\n\t\t\t}\n\t\t\tstore.triggerStateChange();\n\t\t}\n\n\t\tresolve(!hasError);\n\t\t_currentAction = null;\n\n\t\tattemptNextActionFromQueue(stores);\n\t};\n};\n\nexport const processImmediateAction = (store, name, data, state) => {\n\tlet finalError = null;\n\tlet deferred = null;\n\ttry {\n\t\tconst result = store.handleAction(name, data, state);\n\t\tif(result instanceof ActionResult) {\n\t\t\tstate = result.immediate;\n\t\t\tdeferred = result.deferred;\n\t\t}\n\t\telse {\n\t\t\tstate = result;\n\t\t}\n\t}\n\tcatch(error) {\n\t\tif(error instanceof RecoverableError) {\n\t\t\tfinalError = error;\n\t\t}\n\t\telse {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn { state, error: finalError, deferred, store };\n};\n\nexport const processDeferredAction = async (oldResult) => {\n\tlet { state } = oldResult;\n\tlet finalError = null;\n\t\n\ttry {\n\t\tif(oldResult.deferred) {\n\t\t\tstate = await oldResult.deferred();\n\t\t}\n\t}\n\tcatch(error) {\n\t\tif(error instanceof RecoverableError) {\n\t\t\tfinalError = error;\n\t\t}\n\t\telse {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn { state, error: finalError, store: oldResult.store };\n};\n","import { Dispatcher } from './Dispatcher';\nexport default new Dispatcher();","import d from './default-dispatcher';\n\nexport default (actions, dispatcher = d) => {\n\tlet _key = null;\n\tconst _state = {\n\t\tclean: null,\n\t\tdirty: null\n\t};\n\tlet _components = [];\n\tlet _errors = {};\n\n\treturn class Store {\n\t\tconstructor(initialStateValue) {\n\t\t\tthis.isStore = true;\n\t\t\t_state.clean = initialStateValue;\n\t\t\t_state.dirty = initialStateValue;\n\t\t}\n\n\t\tsetKey(key) {\n\t\t\t_key = key;\n\t\t}\n\n\t\tkey() {\n\t\t\treturn _key;\n\t\t}\n\n\t\tsetState(state, clean = false) {\n\t\t\t_state[clean ? 'clean' : 'dirty'] = state;\n\t\t\tif(clean) {\n\t\t\t\t_state.dirty = state;\n\t\t\t}\n\n\t\t\tconst toMerge = {};\n\t\t\ttoMerge[this.key()] = _state.dirty;\n\t\t}\n\n\t\tstate(clean = false) {\n\t\t\treturn _state[clean ? 'clean' : 'dirty'];\n\t\t}\n\n\t\tfullState(clean = false) {\n\t\t\treturn {\n\t\t\t\tvalue: this.state(clean),\n\t\t\t\terrors: _errors\n\t\t\t}\n\t\t}\n\n\t\tsetError(error) {\n\t\t\t_errors = error.toJS();\n\t\t}\n\n\t\ttriggerStateChange() {\n\t\t\tconst toMerge = {};\n\t\t\ttoMerge[this.key()] = this.fullState();\n\t\t\treturn Promise.all(\n\t\t\t\t_components.map(c => new Promise(resolve => c.setState(toMerge, resolve)))\n\t\t\t);\n\t\t}\n\n\t\tdispatcher() {\n\t\t\treturn dispatcher;\n\t\t}\n\n\t\tcanHandleAction(name) {\n\t\t\treturn actions.hasOwnProperty(name);\n\t\t}\n\n\t\thandleAction(name, data, state) {\n\t\t\treturn actions[name].call(this, state, data);\n\t\t}\n\n\t\tconnectToState(componentKey, setStateFn) {\n\t\t\tif(!_components.some(c => c.key === componentKey)) {\n\t\t\t\t_components.push({\n\t\t\t\t\tkey: componentKey,\n\t\t\t\t\tsetState: setStateFn\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`component (key=${componentKey}) is already listening to the store ` +\n\t\t\t\t\t`(key=${this.key()})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tignore(componentKey) {\n\t\t\t_components = _components.filter(c => c.key !== componentKey);\n\t\t}\n\t}\n};","import ActionResult from './ActionResult';\nimport buildSmartComponent from './build-smart-component';\nimport buildStore from './build-store';\nimport d from './default-dispatcher';\nimport { Dispatcher } from './Dispatcher';\nimport RecoverableError from './RecoverableError';\nimport stores from './stores';\n\nconst init = (userStores) => {\n\tfor(const key in userStores) {\n\t\tconst store = userStores[key];\n\t\tstore.setKey(key);\n\t\tstore.dispatcher().subscribe(store);\n\t\tstores[key] = store;\n\t}\n};\n\nexport {\n\tActionResult,\n\tbuildSmartComponent,\n\tbuildStore,\n\td,\n\tDispatcher,\n\tinit,\n\tRecoverableError,\n\tstores\n};"],"names":["ActionResult","immediate","deferred","Function","Error","IdGenerator","componentId","Component","connectedStores","SmartComponent","React","props","state","key","ids","nextComponentId","stores","hasOwnProperty","name","connectToState","setState","bind","fullState","ignore","errors","values","value","RecoverableError","message","data","Map","set","toJS","jsData","Dispatcher","_stores","_actionQueue","_currentAction","subscribe","store","isStore","push","trigger","filter","s","canHandleAction","length","results","map","processImmediateAction","returnValue","some","result","error","setError","triggerStateChange","Promise","resolve","reject","attemptNextActionFromQueue","shift","processActionFromQueue","cleanResults","all","processDeferredAction","stateByStoreKey","clean","dirty","action","hasError","finalError","handleAction","oldResult","actions","dispatcher","d","_key","_state","_components","_errors","Store","initialStateValue","toMerge","c","call","componentKey","setStateFn","init","userStores","setKey"],"mappings":"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"}