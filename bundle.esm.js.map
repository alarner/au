{"version":3,"file":"bundle.esm.js","sources":["src/ActionResult.js","src/Dispatcher.js","src/default-dispatcher.js","src/build-store.js","src/index.js"],"sourcesContent":["export default class ActionResult {\n\tconstructor(immediate, deferred) {\n\t\tif(deferred && !(deferred instanceof Function)) {\n\t\t\tthrow new Error(\n\t\t\t\t'Second argument to ActionResult constructor must be a function if supplied.'\n\t\t\t);\n\t\t}\n\t\tthis.immediate = immediate;\n\t\tthis.deferred = deferred;\n\t}\n}","import ActionResult from './ActionResult';\n\nexport function Dispatcher() {\n\tlet _stores = [];\n\tconst _actionQueue = [];\n\tlet _currentAction = null;\n\n\tthis.subscribe = function(store) {\n\t\tif(!store || !store.isStore) {\n\t\t\tthrow new Error('')\n\t\t}\n\t\t_stores.push(store);\n\t};\n\n\t// Returns a Promise that resolves to true if the action was successful and false if there was\n\t// an error (recoverable or non-recoverable) thrown.\n\tthis.trigger = function(name, data = {}) {\n\t\t// Determine which stores will handle this action.\n\t\tconst stores = _stores.filter(s => s.canHandleAction(name));\n\n\t\tif(!stores.length) {\n\t\t\tthrow new Error(`There are no handlers for action \"${action}\"`);\n\t\t}\n\n\t\t// Get the immediately new state for each store\n\t\tconst results = stores.map(s => processImmediateAction(s, name, data, s.state()));\n\n\t\t// Apply the new dirty states for each store\n\t\tfor(const result of results) {\n\t\t\tif(!result.error) {\n\t\t\t\tresult.store.setState(result.state, false, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.store.setError(result.error, false);\n\t\t\t}\n\t\t\tresult.store.triggerStateChange();\n\t\t}\n\n\t\tlet returnValue = null;\n\n\t\tif(results.some(result => result.error)) {\n\t\t\treturnValue = false\n\t\t}\n\n\t\tif(!results.some(result => result.deferred)) {\n\t\t\treturnValue = true;\n\t\t}\n\n\t\tif(returnValue !== null) {\n\t\t\t// If we are waiting on anything in the queue then we also need to push this on to the\n\t\t\t// queue so that we can re-play it once the previous actions are complete.\n\t\t\tif(_actionQueue.length) {\n\t\t\t\t_actionQueue.push({\n\t\t\t\t\tname,\n\t\t\t\t\tdata,\n\t\t\t\t\tresults,\n\t\t\t\t\tresolve: null,\n\t\t\t\t\treject: null\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn returnValue;\n\t\t}\n\n\t\t// If there are deferred values to wait for then add the action to the queue \n\t\treturn new Promise((resolve, reject) => {\n\t\t\t_actionQueue.push({\n\t\t\t\tname,\n\t\t\t\tdata,\n\t\t\t\tresults,\n\t\t\t\tresolve,\n\t\t\t\treject\n\t\t\t});\n\t\t\tattemptNextActionFromQueue(_stores);\n\t\t});\n\t};\n\n\tthis.attemptNextActionFromQueue = function() {\n\t\tif(!_currentAction) {\n\t\t\t_currentAction = _actionQueue.shift();\n\t\t\tif(_currentAction) {\n\t\t\t\tthis.processActionFromQueue(_currentAction, _stores);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.processActionFromQueue = async function({ name, data, results, resolve, reject }) {\n\t\t// Determine which stores will handle this action.\n\t\tconst stores = _stores.filter(s => s.canHandleAction(name));\n\n\t\t// Get the clean state from the server for all deferred actions\n\t\tconst cleanResults = await Promise.all(results.map(processDeferredAction));\n\n\t\t// Group clean results by their store key\n\t\tconst stateByStoreKey = {};\n\t\tfor(const { state, error, store } of cleanResults) {\n\t\t\tstateByStoreKey[store.key()] = { clean: state, error, dirty: state, store };\n\t\t}\n\n\t\t// Re-apply future actions\n\t\tfor(const action of _actionQueue) {\n\t\t\t// Determine which stores will handle this action.\n\t\t\tconst stores = _stores.filter(s => s.canHandleAction(action.name));\n\n\t\t\t// Get the immediately new state for each store\n\t\t\tconst results = stores.map(\n\t\t\t\ts => processImmediateAction(s, action.name, action.data, s.state())\n\t\t\t);\n\n\t\t\t// Apply the new dirty states for each store\n\t\t\tfor(const result of results) {\n\t\t\t\tconst key = result.store.key();\n\t\t\t\tif(stateByStoreKey.hasOwnProperty(key)) {\n\t\t\t\t\tstateByStoreKey[key].dirty = result.state;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the clean and dirty state for all stores and trigger updates\n\t\tfor(const key of stateByStoreKey) {\n\t\t\tconst { store, clean, dirty, error } = stateByStoreKey[key];\n\t\t\tif(!error) {\n\t\t\t\tstore.setState(clean, true, false);\n\t\t\t\tstore.setState(dirty, false, false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstore.setError(error, false);\n\t\t\t}\n\t\t\tstore.triggerStateChange();\n\t\t}\n\n\t\tattemptNextActionFromQueue(stores);\n\t};\n};\n\nexport const processImmediateAction = (store, name, data, state) => {\n\tlet finalError = null;\n\tlet deferred = null;\n\ttry {\n\t\tconst result = store.handleAction(name, data, state);\n\t\tif(result instanceof ActionResult) {\n\t\t\tstate = result.immediate;\n\t\t\tdeferred = result.deferred;\n\t\t}\n\t\telse {\n\t\t\tstate = result;\n\t\t}\n\t}\n\tcatch(error) {\n\t\tif(error instanceof StoreError) {\n\t\t\tfinalError = error;\n\t\t}\n\t\telse {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn { state, error: finalError, deferred, store };\n};\n\nexport const processDeferredAction = async (oldResult) => {\n\tlet { state } = oldResult;\n\tlet finalError = null;\n\t\n\ttry {\n\t\tif(oldResult.deferred) {\n\t\t\tstate = await oldResult.deferred();\n\t\t}\n\t}\n\tcatch(error) {\n\t\tif(error instanceof StoreError) {\n\t\t\tfinalError = error;\n\t\t}\n\t\telse {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn { state, error: finalError, store: oldResult.store };\n};\n","import { Dispatcher } from './Dispatcher';\nexport default new Dispatcher();","import d from './default-dispatcher';\n\nexport default (actions, dispatcher = d) => {\n\tlet _key = null;\n\tconst _state = {\n\t\tclean: null,\n\t\tdirty: null\n\t};\n\tconst _components = [];\n\n\treturn class Store {\n\t\tconstructor(initialStateValue) {\n\t\t\tthis.isStore = true;\n\t\t\t_state.clean = initialStateValue;\n\t\t\t_state.dirty = initialStateValue;\n\t\t}\n\n\t\tsetKey(key) {\n\t\t\t_key = key;\n\t\t}\n\n\t\tkey() {\n\t\t\treturn _key;\n\t\t}\n\n\t\tsetState(state, clean = false, trigger = true) {\n\t\t\t_state[clean ? 'clean' : 'dirty'] = state;\n\t\t\tif(clean) {\n\t\t\t\t_state.dirty = state;\n\t\t\t}\n\n\t\t\tconst toMerge = {};\n\t\t\ttoMerge[this.key()] = _state.dirty;\n\n\t\t\tif(trigger) {\n\t\t\t\treturn this.triggerStateChange();\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\n\t\tstate(clean = false) {\n\t\t\treturn _state[clean ? 'clean' : 'dirty'];\n\t\t}\n\n\t\ttriggerStateChange() {\n\t\t\treturn Promise.all(\n\t\t\t\t_components.map(c => new Promise(resolve => c.setState(toMerge, resolve)))\n\t\t\t);\n\t\t}\n\n\t\tdispatcher() {\n\t\t\treturn dispatcher;\n\t\t}\n\n\t\tcanHandleAction(name) {\n\t\t\treturn actions.hasOwnProperty(name);\n\t\t}\n\n\t\thandleAction(name, data, state) {\n\t\t\treturn actions[name].call(this, state, data);\n\t\t}\n\n\t\tconnectToState(componentKey, setStateFn) {\n\t\t\tif(!_components.some(c => c.key === componentKey)) {\n\t\t\t\t_components.push({\n\t\t\t\t\tkey: componentKey,\n\t\t\t\t\tsetState: setStateFn\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`component (key=${componentKey}) is already listening to the store ` +\n\t\t\t\t\t`(key=${this.key()})`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n};","import ActionResult from './ActionResult';\nimport buildStore from './build-store';\nimport d from './default-dispatcher';\nimport { Dispatcher } from './Dispatcher';\n\nconst init = (stores) => {\n\tfor(const key in stores) {\n\t\tconst store = stores[key];\n\t\tstore.setKey(key);\n\t\tstore.dispatcher().subscribe(store);\n\t}\n};\n\nexport {\n\tActionResult,\n\tbuildStore,\n\td,\n\tDispatcher,\n\tinit\n};"],"names":[],"mappings":"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"}